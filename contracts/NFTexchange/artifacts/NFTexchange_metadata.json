{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct LibAsset.Asset",
						"name": "sellerAsset",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct LibAsset.Asset",
						"name": "buyerAsset",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "start",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "end",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum State.stateItem",
						"name": "state",
						"type": "uint8"
					}
				],
				"name": "MarketItemCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct LibAsset.Asset",
						"name": "sellerAsset",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct LibAsset.Asset",
						"name": "buyerAsset",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "enum State.stateItem",
						"name": "state",
						"type": "uint8"
					}
				],
				"name": "MarketItemSold",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct LibAsset.Asset",
						"name": "sellerAsset",
						"type": "tuple"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct LibAsset.Asset",
						"name": "buyerAsset",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "bidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isAccepted",
						"type": "bool"
					}
				],
				"name": "bidToItem",
				"type": "event"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct LibAsset.Asset",
						"name": "_asset",
						"type": "tuple"
					}
				],
				"name": "TransferFeeMarketOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_bidItemId",
						"type": "uint256"
					}
				],
				"name": "acceptBidByOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "bidItems",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "marketItemId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct LibAsset.Asset",
						"name": "sellerAsset",
						"type": "tuple"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct LibAsset.Asset",
						"name": "buyerAsset",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "bidder",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "isAccepted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "ERC20Token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					}
				],
				"name": "checkBalanceERC20",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "checkRoyalty",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct LibAsset.Asset",
						"name": "_sellerAsset",
						"type": "tuple"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct LibAsset.Asset",
						"name": "_buyerAsset",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "_start",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_end",
						"type": "uint256"
					}
				],
				"name": "createMarketItem",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "itemId",
						"type": "uint256"
					}
				],
				"name": "deleteMarketItem",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalBids",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "marketItemId",
						"type": "uint256"
					}
				],
				"name": "marketSale",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "orderItems",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "seller",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct LibAsset.Asset",
						"name": "sellerAsset",
						"type": "tuple"
					},
					{
						"internalType": "address payable",
						"name": "buyer",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "assetClass",
										"type": "bytes4"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct LibAsset.AssetType",
								"name": "assetType",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct LibAsset.Asset",
						"name": "buyerAsset",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "start",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "end",
						"type": "uint256"
					},
					{
						"internalType": "enum State.stateItem",
						"name": "state",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "marketItemId",
								"type": "uint256"
							},
							{
								"components": [
									{
										"components": [
											{
												"internalType": "bytes4",
												"name": "assetClass",
												"type": "bytes4"
											},
											{
												"internalType": "bytes",
												"name": "data",
												"type": "bytes"
											}
										],
										"internalType": "struct LibAsset.AssetType",
										"name": "assetType",
										"type": "tuple"
									},
									{
										"internalType": "uint256",
										"name": "value",
										"type": "uint256"
									}
								],
								"internalType": "struct LibAsset.Asset",
								"name": "sellerAsset",
								"type": "tuple"
							},
							{
								"components": [
									{
										"components": [
											{
												"internalType": "bytes4",
												"name": "assetClass",
												"type": "bytes4"
											},
											{
												"internalType": "bytes",
												"name": "data",
												"type": "bytes"
											}
										],
										"internalType": "struct LibAsset.AssetType",
										"name": "assetType",
										"type": "tuple"
									},
									{
										"internalType": "uint256",
										"name": "value",
										"type": "uint256"
									}
								],
								"internalType": "struct LibAsset.Asset",
								"name": "buyerAsset",
								"type": "tuple"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "seller",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isAccepted",
								"type": "bool"
							}
						],
						"internalType": "struct NFTexchange.BidList",
						"name": "_bidItem",
						"type": "tuple"
					}
				],
				"name": "setBid",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_fee",
						"type": "uint256"
					}
				],
				"name": "updateFeeMarket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/NFTexchange/NFTexchange.sol": "NFTexchange"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010",
				"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
			"keccak256": "0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd9c47a375639888e726a99da718890ba16d17d7ad9eacb0ccc892d46d1b3ee0",
				"dweb:/ipfs/Qmb41W5RUjy2sWg49A2rMnxekSeEk6SvGyJL5tyCCSr7un"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d",
			"license": "MIT",
			"urls": [
				"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d",
				"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5ea15ef7c8980240ccd46df13809d163f749bc0a01d8bced1875660d4872da1c",
				"dweb:/ipfs/QmbDfAT9VeCSG4cnPd6tjDMp8ED85dLHbWyMyv7wbmL4CH"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
			"license": "MIT",
			"urls": [
				"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
				"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
				"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634",
				"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
				"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		},
		"contracts/NFTexchange/Lib/LibAsset.sol": {
			"keccak256": "0x84f3dc7ed7b0dd2117cde1ae01b361cb7063893b1ffff45d21f3b52c981e9f10",
			"license": "pirate",
			"urls": [
				"bzz-raw://798149e500b61cf72faba5b91d15bca79923f9df8e2eb4195d513e5df32184a3",
				"dweb:/ipfs/QmZsc9e4EAT9pTQHbMq2uL1A97VW8k9ekupazbLnNUiGv2"
			]
		},
		"contracts/NFTexchange/Lib/LibTransfer.sol": {
			"keccak256": "0xea8e9edbb0e8bedd539f07409f5999986014e1825f08be5be625c51551c750a6",
			"license": "pirate",
			"urls": [
				"bzz-raw://0fb9d5803c6f8e76203b4da22c9a29c523a0dc796e3a7ae6285f703ed4e4629e",
				"dweb:/ipfs/QmdTwC6XwRcSRJVGCzxZYA9pyV1NncoRWVtktmTgaCcRkp"
			]
		},
		"contracts/NFTexchange/Lib/MarketOwner.sol": {
			"keccak256": "0x3e8dd368ab3fbebc34ef2f67f662f1c3855b91e1c375f44ef7ad97174c423fe3",
			"license": "pirate",
			"urls": [
				"bzz-raw://d6a050fef4a9a60dabe8e2fca5aa679096ed2e252d32fa4ecafe6c88bf573774",
				"dweb:/ipfs/QmQpFVtPFot3FUuXU1aBzd1kZeX5VM3JhnexqGQHRvDpUd"
			]
		},
		"contracts/NFTexchange/Lib/Order.sol": {
			"keccak256": "0x10b0e79c5d2433c108105fc0bc5a289bceb9a89cf47108174ca8670a3d34a91e",
			"license": "pirate",
			"urls": [
				"bzz-raw://2f47e6a47e9e948785d7f4e78fb79c75c2efc160ac6e71929b25d6eadfb35355",
				"dweb:/ipfs/QmeeHir2cY3WFhXBwW9BYWFhtH6ccStQgY6cmWq8iKwSPj"
			]
		},
		"contracts/NFTexchange/Lib/State.sol": {
			"keccak256": "0x21b69c0ee85bf487a65d6c8e68c069832b503122566f702ead103aaa737f69c7",
			"license": "pirate",
			"urls": [
				"bzz-raw://c883b031f4d56663f3c04588330ae8463401b6d439d982318e371e09027d7354",
				"dweb:/ipfs/QmSv2hmm7QM3nyfpvm728PKdon5Xo4AzHi6D8iZ3CzEbGu"
			]
		},
		"contracts/NFTexchange/Lib/Validate.sol": {
			"keccak256": "0x60c15d03109762b2a10a99d7df0a3584f3eda29272d9ceb5655a9219c2803b6e",
			"license": "pirate",
			"urls": [
				"bzz-raw://c90bd463123f5a89b063c9783f55229a781c61e0d8480aa0017198d50d9831ee",
				"dweb:/ipfs/QmPoSon7EJfygnbSmSKSsg7ZD2PAvptpKJUVu3NN2NhRqx"
			]
		},
		"contracts/NFTexchange/Lib/interface/IMarketOwner.sol": {
			"keccak256": "0x52ec4070fce9244df6de5ee8e49117f9a692fede8dc1d5d3bef42bab139d001e",
			"license": "MIT",
			"urls": [
				"bzz-raw://f507f96e956047a51ad73dc7d98303f6c3ffaaac32179a46db586a01d02e94f4",
				"dweb:/ipfs/QmYcWQFhyD3fxNSkAJ86URipJiCRjE9oU8jpWBcazvXSyq"
			]
		},
		"contracts/NFTexchange/Lib/interface/IOrder.sol": {
			"keccak256": "0x5b3ac733aaadba02e5a74bb0ca6109a78dc81105ef028bb7c74ad64f47d17e72",
			"license": "MIT",
			"urls": [
				"bzz-raw://db647add2ddccb76024e3555f5520c8b663ad4b2d64e90f9774a75d5d69239c9",
				"dweb:/ipfs/QmT5kKq4nXRerouHVBrKKo6J1umjbqhZz9pSpKF73vYwU6"
			]
		},
		"contracts/NFTexchange/Lib/interface/ITransferManager.sol": {
			"keccak256": "0x36e286d3c8a2ed1895e42af4a5df840a05025ae3510eb99318cbd5eee78efd56",
			"license": "MIT",
			"urls": [
				"bzz-raw://589110234321503dfbb008014f559703d3680c42d929fd9b3777ffddbf0a6cf8",
				"dweb:/ipfs/QmRqD9D97wj3RKTND5WwvWMxw5pxLHJvgPD8Susv84mP9r"
			]
		},
		"contracts/NFTexchange/NFTexchange.sol": {
			"keccak256": "0x84bedd7eb6dcd8e3b9ed5833cdecdce918fdabba1e2c3d7677da7168c888ce55",
			"license": "pirate",
			"urls": [
				"bzz-raw://82ebeac17d919d5b297b15643ec29b097dbf545508164989eb2107170a1f20c0",
				"dweb:/ipfs/QmUcfG2xT58qp3HdJidEcvRVQtEyzJpzBmWBEtshR99Xp2"
			]
		},
		"contracts/royalties/IERC2981Royalties.sol": {
			"keccak256": "0x5ee1a447c5570dcd1ff4f0e81a62401348e65b5fb886c7d72936e8f497e5a570",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b9aac0662f874b327bfb9157d9707bf1d0df430c0fed171cfe8c6dd7070f78d",
				"dweb:/ipfs/QmQLxyipUAWtqgo8qdigFunu7j7FpuzqK779sMUn4X4AHA"
			]
		}
	},
	"version": 1
}